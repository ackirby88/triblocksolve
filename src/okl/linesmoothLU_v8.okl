/* ========= */
/* Version 7 */
/* ========= */
#define p_blockSize 256

/* multi-index array definitions */
typedef const double const_jacDiag @dim(NVAR,NVAR,nelem);
typedef const double const_jacOffD @dim(NVAR,NVAR,nintfaces);
typedef const double const_ndoftot @dim(NVAR,nelem);
typedef       double      _ndoftot @dim(NVAR,nelem);
typedef const double const_matrix  @dim(NVAR,NVAR);
typedef const double const_vector  @dim(NVAR);
typedef       double      _matrix  @dim(NVAR,NVAR);
typedef       double      _vector  @dim(NVAR);

#define doubleLoop \
    for(int j = 0; j < NVAR; ++j; @inner) \
        for(int i = 0; i < NVAR; ++i; @inner)

#define threads_per_block NVAR*NVAR

/* =============== */
/* utility methods */
/* =============== */
/* solve Ax = b, A is LU-factored */
inline void solveLU(@restrict const_matrix *A,
                    @restrict const double *b,
                    @restrict       double *x){
    double y[NVAR];

    /* forward substitution */
    for(int i = 0; i < NVAR; ++i;){
        double tot = 0.0;
        for(int j = 0; j < i; ++j){
            tot += A(i,j)*y[j];
        }
        y[i] = b[i]-tot;
    }

    /* back substitute to find x */
    for(int i = NVAR-1; i >= 0; --i){
        double tot = 0.0;
        for(int j = i+1; j < NVAR; ++j){
            tot += A(i,j)*x[j];
        }
        x[i] = (y[i]-tot)/A(i,i);
    }
}

/* y = Ax, A = LU */
inline void dgemvLU(@restrict const_matrix *LU,
                    @restrict const double *x,
                    @restrict       double *b){
    double y[NVAR];

    /* U operating on x */
    for(int i = 0; i < NVAR; ++i){
        double tot = 0.0;
        for(int j = i; j < NVAR; ++j){
            tot += LU(i,j)*x[j];
        }
        y[i] = tot;
    }

    /* L operating on y */
    for(int i = 0; i < NVAR; ++i){
        b[i] = y[i];
        for(int j = 0; j < i; ++j){
          b[i] += LU(i,j)*y[j];
        }
    }
}

@kernel void copyAtoB(const int nelem,
           @restrict const double *A,
           @restrict       double *B){

    /* copy vector */
    for(int n = 0; n < nelem*NVAR; ++n; @tile(p_blockSize,@outer,@inner)){
        B[n] = A[n];
    }
}

/* kernels */
/* ======================================================================= */
@kernel void linesolver(const int iters,
                        const int nelem,
                        const int nintfaces,
                        const int eftot,
                        const int nlines,
                        const int linelemtot,
              @restrict const int *epoint,
              @restrict const int *ef,
              @restrict const int *fc,
              @restrict const int *linesize,
              @restrict const int *linepoint,
              @restrict const int *lines,
              @restrict const int *lineface,
              @restrict const_jacDiag *Dia,
              @restrict const_jacOffD *Of1,
              @restrict const_jacOffD *Of2,
              @restrict      _ndoftot *dU,
              @restrict const_ndoftot *B,
              @restrict      _ndoftot *U,
              @restrict      _ndoftot *R){

    /* =============================================================== *
     * IDEA: parallelize over lines using thread blocks (out-of-order) *
     *   @outer: out-of-order parallel thread blocks                   *
     *   @inner: thread-level parallelism (doubleLoop{ (i,j) thread}   *
     * =============================================================== */
    for(int o = 0; o < 1; ++o; @outer){
        @shared double x[NVAR];
        @shared double S[NVAR];
        @shared double s_U[NVAR];
        @shared double s_R[NVAR];
        @shared double s_dU_e[NVAR];
        @shared double s_dU_elast[NVAR];
        @shared _matrix s_AT[NVAR*NVAR];
        @shared _matrix s_CT[NVAR*NVAR];
        @shared _matrix s_Dia[NVAR*NVAR];
        @shared _matrix s_Dia_e[NVAR*NVAR];
        @shared _matrix s_Dia_elast[NVAR*NVAR];

        @shared int s_lines[MAX_LINE_ELEM];
        @shared int s_lineface[MAX_LINE_ELEM];
      //@shared int s_fc0[MAX_LINE_ELEM];
      //@shared int s_fc1[MAX_LINE_ELEM];

        for(int l = 0; l < nlines; ++l; @outer){
            const int nelem_line = linesize[l];
            const int m0 = linepoint[l];
            const int e0 = lines[m0];
            const int nblocks = nelem_line/threads_per_block + 1; // NVAR*NVAR threads at a time

            /* =============================================== *
             * 0. build shared line-local mesh data structures *
             * =============================================== */
            // fill local lines
            doubleLoop{
                for(int n = 0; n < nblocks; ++n){
                    int k = n*threads_per_block + j*NVAR + i;
                    if(k < nelem_line){
                        int m = m0 + k;
                        s_lines[k] = lines[m];
                    }
                }
            }

            // fill local lineface
            doubleLoop{
                for(int n = 0; n < nblocks; ++n){
                    int k = n*threads_per_block + j*NVAR + i;
                    if(k < nelem_line){
                        int m = m0 + k;
                        s_lineface[k] = lineface[m];
                    }
                }
            }

            // fill local fc
//            doubleLoop{
//                for(int n = 0; n < nblocks; ++n){
//                    int k = n*threads_per_block + j*NVAR + i;
//                    if(k < nelem_line){
//                        int m = m0 + k;
//                        int f = lineface[m];
//                        //const int f = s_lineface[k];
//                        s_fc0[k] = fc[2*f+0];
//                        s_fc1[k] = fc[2*f+1];
//                    }
//                }
//            }

            /* =============== *
             * 1. Solve for dU *
             * =============== */
             // block 1
            doubleLoop{
                const int e0 = s_lines[0];

                // set right hand side: -r
                if(j==0) S[i] = -R(i,e0);

                // reset residual
                if(j==0) R(i,e0) = B(i,e0);

                // fetch Dia(e) to shared
                s_Dia(i,j) = Dia(i,j,e0);
                @barrier();

                // solve dU(e) = [D]^(-1)*S
                solveLU(s_Dia,S,s_dU_e);
                @barrier();

                if(j==0) dU(i,e0) = s_dU_e[i];
            }

            // remaining blocks: solve dU
            // forward solve
            doubleLoop{
                for(int k = 1; k < nelem_line; ++k){
                    const int elast = s_lines[k-1];
                    const int e = s_lines[k];

                    const int f = s_lineface[k];
                    const int e1 = fc[2*f+0];
                    const int e2 = fc[2*f+1];
                  //const int e1 = s_fc0[k];
                  //const int e2 = s_fc1[k];

                    // fetch transpose(A) to shared
                    const_jacOffD *A = (e==e1) ? Of2:Of1;
                    s_AT(j,i) = A(i,j,f);

                    // fetch Dia(e) to shared
                    s_Dia(i,j) = Dia(i,j,e);

                    // fetch dU(elast) to shared
                    if(j==0) s_dU_elast[i] = dU(i,elast);
                    @barrier();

                    // dgemv: x = A(:,:,f)*dU(:,elast)
                    if(j==0){
                        double tot = 0.0;
                        for(int jj = 0; jj < NVAR; ++jj){
                            tot += s_AT(jj,i)*s_dU_elast[jj];
                        }
                        x[i] = tot;
                    }
                    @barrier();

                    // form total right hand side
                    if(j==0) S[i] = -R(i,e) - x[i];

                    // reset residual
                    if(j==0) R(i,e) = B(i,e);
                    @barrier();

                    // dU(e) = [D]^(-1)*S
                    solveLU(s_Dia,S,s_dU_e);
                    @barrier();

                    if(j==0) dU(i,e) = s_dU_e[i];
                }
            }

            // back solve
            doubleLoop{
                for(int k = nelem_line-2; k >= 0; --k){
                    const int e = s_lines[k];
                    const int elast = s_lines[k+1];

                    const int f = s_lineface[k+1];
                    const int e1 = fc[2*f+0];
                    const int e2 = fc[2*f+1];
                  //const int e1 = s_fc0[k+1];
                  //const int e2 = s_fc1[k+1];

                    // fetch transpose(C) to shared
                    const_jacOffD *C = (e==e1) ? Of2:Of1;
                    s_CT(j,i) = C(i,j,f);

                    // fetch Dia(e) to shared
                    s_Dia(i,j) = Dia(i,j,e);

                    // fetch dU(elast) to shared
                    if(j==0) s_dU_elast[i] = dU(i,elast);
                    @barrier();

                    // dgemv: x = C(:,:,f)*dU(:,elast)
                    if(j==0){
                        double tot = 0.0;
                        for(int jj = 0; jj < NVAR; ++jj){
                            tot += s_CT(jj,i)*s_dU_elast[jj];
                        }
                        x[i] = tot;
                    }
                    @barrier();

                    // dU(e) = dU(e) - [D]^(-1)*x
                    solveLU(s_Dia,x,S);
                    @barrier();

                    if(j==0) dU(i,e) -= S[i];
                }
            }

            /* ============================== *
             * 2. update solution using dU    *
             * ============================== */
            /* add vector in place */
            doubleLoop{
                if(j==0){
                    for(int k = 0; k < nelem_line; ++k){
                        const int e = s_lines[k];
                        U(i,e) += dU(i,e);
                    }
                }
            }
//        }
//        /* ALL LINES MUST FINISH BEFORE LINEAR RESIDUAL CALCULATION */
//
//        /* ================== *
//         * 4. linear residual *
//         * ================== */
//        for(int l = 0; l < nlines; ++l; @outer){
//            const int nelem_line = linesize[l];

            // block 1
            doubleLoop{
                const int e0 = s_lines[0];

                if(j==0) s_R[i] = 0.0; // zero residual buffer

                /* off-diagonal components */
                for(int k2 = epoint[e0]; k2 < epoint[e0+1]; ++k2){
                    const int f = ef[k2];
                    if(f>=0){
                        const int e1 = fc[2*f+0];
                        const int e2 = fc[2*f+1];

                        const_jacOffD *A = (e0==e1) ? Of2:Of1;
                        const int neighbor_id = (e0==e1) ? e2:e1;

                        // fetch transpose(A) to shared
                        s_AT(j,i) = A(i,j,f);

                        // fetch U(neighbor_id) to shared
                        if(j==0) s_U[i] = U(i,neighbor_id);
                        @barrier();

                        // dgemv(A,U,s_R)
                        if(j==0){
                            double tot = 0.0;
                            for(int jj = 0; jj < NVAR; ++jj){
                                tot += s_AT(jj,i)*s_U[jj];
                            }
                            s_R[i] += tot;
                        }
                    }
                }

                /* diagonal component */
                // fetch D(:,:,e) and U(neighbor_id) to shared
                s_Dia_e(i,j) = Dia(i,j,e0);
                if(j==0) s_U[i] = U(i,e0);
                @barrier();

                if(j==0) dgemvLU(s_Dia_e,s_U,x);
                @barrier();

                // accumulate into global residual vector
                R(i,e0) += x[i] + s_R[i];
            }

            // remaining blocks
            doubleLoop{
                for(int k = 1; k < nelem_line; ++k){
                    const int e = s_lines[k];
                    const int elast = s_lines[k-1];

                    const int f = s_lineface[k];
                    int e1 = fc[2*f+0];
                    int e2 = fc[2*f+1];
                  //int e1 = s_fc0[k];
                  //int e2 = s_fc1[k];

                    /* ======================================================================*
                     * 1.) Diagonal Contribution: Factored D from Block Thomas Factorization *
                     *       >>>Nicks Thesis, p.102 Alg.1, line 4 rearranged for [B]_j       *
                     *                  [B]_j = [B']_j + [A]_j*([B']_{j-1}^{-1} * [C]_{j-1}) *
                     *                         <part A>   +        <part B>                  *
                     *                                                                       *
                     * ----> [Jacobian Diagonal Block] = [B]_j                               *
                     * ---->  [B]_J * U part of right hand side                              *
                     * ===================================================================== */

                    // zero residual buffer
                    if(j==0) s_R[i] = 0.0;

                    /* ---------- */
                    /* Fetch Data */
                    /* ---------- */
                    const_jacOffD *A = (e==e1) ? Of2:Of1;
                    const_jacOffD *C = (e==e1) ? Of1:Of2;

                    // fetch transpose(C) to shared
                    s_CT(j,i) = C(i,j,f);

                    // fetch transpose(A) to shared
                    s_AT(j,i) = A(i,j,f);

                    // fetch U to shared
                    if(j==0) s_U[i] = U(i,e);

                    // fetch Dia(elast) to shared
                    s_Dia_elast(i,j) = Dia(i,j,elast);

                    // fetch Dia(e) to shared
                    s_Dia_e(i,j) = Dia(i,j,e);
                    @barrier();

                    /* ----- */
                    /* Solve */
                    /* ----- */
                    // x = [C]_{j-1} * U(e)
                    if(j==0){
                        double tot = 0.0;
                        for(int jj = 0; jj < NVAR; ++jj){
                            tot += s_CT(jj,i)*s_U[jj];
                        }
                        x[i] = tot;
                    }
                    @barrier();

                    // S = [B']_{j-1}^{-1} * x
                    if(j==0) solveLU(s_Dia_elast,x,S);
                    @barrier();

                    // x = [A]_j * S      = <part B>
                    if(j==0){
                        double tot = 0.0;
                        for(int jj = 0; jj < NVAR; ++jj){
                            tot += s_AT(jj,i)*S[jj];
                        }
                        x[i] = tot;
                    }

                    // S = [B']_j * U(e)) = <part A>
                    if(j==0) dgemvLU(s_Dia_e,s_U,S);
                    @barrier();

                    // accumulate result: <part A> + <part B>
                    if(j==0) s_R[i] += x[i] + S[i];
                    @barrier();
                    /* ========================================================== */

                    /* ========================================================== */
                    /* 2.) Off Diagonal Contributions (all off-diagonal elements) */
                    /* ========================================================== */
                    for(int k2 = epoint[e]; k2 < epoint[e+1]; ++k2){
                        const int f = ef[k2];
                        if(f>=0){
                            e1 = fc[2*f+0];
                            e2 = fc[2*f+1];

                            const_jacOffD *A = (e==e1) ? Of2:Of1;
                            const int neighbor_id = (e==e1) ? e2:e1;

                            // fetch transpose(A) to shared
                            s_AT(j,i) = A(i,j,f);

                            // fetch U to shared
                            if(j==0) s_U[i] = U(i,neighbor_id);
                            @barrier();

                            // dgemv(A,U,R)
                            if(j==0){
                                double tot = 0.0;
                                for(int jj = 0; jj < NVAR; ++jj){
                                    tot += s_AT(jj,i)*s_U[jj];
                                }
                                s_R[i] += tot;
                            }
                        }
                    }
                    @barrier();

                    // accumulate into global residual vector
                    R(i,e) += s_R[i];
                }
            }
        }
    }
}